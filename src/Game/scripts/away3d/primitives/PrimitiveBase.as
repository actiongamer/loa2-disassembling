package away3d.primitives
{
   import away3d.core.base.Geometry;
   import away3d.core.base.CompactSubGeometry;
   import away3d.core.base.ISubGeometry;
   import flash.geom.Matrix3D;
   import away3d.errors.AbstractMethodError;
   
   public class PrimitiveBase extends Geometry
   {
       
      
      protected var _geomDirty:Boolean = true;
      
      protected var _uvDirty:Boolean = true;
      
      private var _subGeometry:CompactSubGeometry;
      
      public function PrimitiveBase()
      {
         super();
         _subGeometry = new CompactSubGeometry();
         _subGeometry.autoGenerateDummyUVs = false;
         addSubGeometry(_subGeometry);
      }
      
      override public function get subGeometries() : Vector.<ISubGeometry>
      {
         if(_geomDirty)
         {
            updateGeometry();
         }
         if(_uvDirty)
         {
            updateUVs();
         }
         return super.subGeometries;
      }
      
      override public function clone() : Geometry
      {
         if(_geomDirty)
         {
            updateGeometry();
         }
         if(_uvDirty)
         {
            updateUVs();
         }
         return super.clone();
      }
      
      override public function scale(param1:Number) : void
      {
         if(_geomDirty)
         {
            updateGeometry();
         }
         super.scale(param1);
      }
      
      override public function scaleUV(param1:Number = 1, param2:Number = 1) : void
      {
         if(_uvDirty)
         {
            updateUVs();
         }
         super.scaleUV(param1,param2);
      }
      
      override public function applyTransformation(param1:Matrix3D) : void
      {
         if(_geomDirty)
         {
            updateGeometry();
         }
         super.applyTransformation(param1);
      }
      
      protected function buildGeometry(param1:CompactSubGeometry) : void
      {
         throw new AbstractMethodError();
      }
      
      protected function buildUVs(param1:CompactSubGeometry) : void
      {
         throw new AbstractMethodError();
      }
      
      protected function invalidateGeometry() : void
      {
         _geomDirty = true;
      }
      
      protected function invalidateUVs() : void
      {
         _uvDirty = true;
      }
      
      private function updateGeometry() : void
      {
         buildGeometry(_subGeometry);
         _geomDirty = false;
      }
      
      private function updateUVs() : void
      {
         buildUVs(_subGeometry);
         _uvDirty = false;
      }
      
      override function validate() : void
      {
         if(_geomDirty)
         {
            updateGeometry();
         }
         if(_uvDirty)
         {
            updateUVs();
         }
      }
   }
}
